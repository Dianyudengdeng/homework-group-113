#include "SM4.h"
unsigned char Sbox[256] = {
    0xd6,0x90,0xe9,0xfe,0xcc,0xe1,0x3d,0xb7,0x16,0xb6,0x14,0xc2,0x28,0xfb,0x2c,0x05,
    0x2b,0x67,0x9a,0x76,0x2a,0xbe,0x04,0xc3,0xaa,0x44,0x13,0x26,0x49,0x86,0x06,0x99,
    0x9c,0x42,0x50,0xf4,0x91,0xef,0x98,0x7a,0x33,0x54,0x0b,0x43,0xed,0xcf,0xac,0x62,
    0xe4,0xb3,0x1c,0xa9,0xc9,0x08,0xe8,0x95,0x80,0xdf,0x94,0xfa,0x75,0x8f,0x3f,0xa6,
    0x47,0x07,0xa7,0xfc,0xf3,0x73,0x17,0xba,0x83,0x59,0x3c,0x19,0xe6,0x85,0x4f,0xa8,
    0x68,0x6b,0x81,0xb2,0x71,0x64,0xda,0x8b,0xf8,0xeb,0x0f,0x4b,0x70,0x56,0x9d,0x35,
    0x1e,0x24,0x0e,0x5e,0x63,0x58,0xd1,0xa2,0x25,0x22,0x7c,0x3b,0x01,0x21,0x78,0x87,
    0xd4,0x00,0x46,0x57,0x9f,0xd3,0x27,0x52,0x4c,0x36,0x02,0xe7,0xa0,0xc4,0xc8,0x9e,
    0xea,0xbf,0x8a,0xd2,0x40,0xc7,0x38,0xb5,0xa3,0xf7,0xf2,0xce,0xf9,0x61,0x15,0xa1,
    0xe0,0xae,0x5d,0xa4,0x9b,0x34,0x1a,0x55,0xad,0x93,0x32,0x30,0xf5,0x8c,0xb1,0xe3,
    0x1d,0xf6,0xe2,0x2e,0x82,0x66,0xca,0x60,0xc0,0x29,0x23,0xab,0x0d,0x53,0x4e,0x6f,
    0xd5,0xdb,0x37,0x45,0xde,0xfd,0x8e,0x2f,0x03,0xff,0x6a,0x72,0x6d,0x6c,0x5b,0x51,
    0x8d,0x1b,0xaf,0x92,0xbb,0xdd,0xbc,0x7f,0x11,0xd9,0x5c,0x41,0x1f,0x10,0x5a,0xd8,
    0x0a,0xc1,0x31,0x88,0xa5,0xcd,0x7b,0xbd,0x2d,0x74,0xd0,0x12,0xb8,0xe5,0xb4,0xb0,
    0x89,0x69,0x97,0x4a,0x0c,0x96,0x77,0x7e,0x65,0xb9,0xf1,0x09,0xc5,0x6e,0xc6,0x84,
    0x18,0xf0,0x7d,0xec,0x3a,0xdc,0x4d,0x20,0x79,0xee,0x5f,0x3e,0xd7,0xcb,0x39,0x48
};


unsigned int MK[4];
unsigned int FK[4] = { 0xA3B1BAC6, 0x56AA3350, 0x677D9197, 0xB27022DC };
unsigned int CK[32] = {
    0x00070e15, 0x1c232a31, 0x383f464d, 0x545b6269, 0x70777e85, 0x8c939aa1, 0xa8afb6bd, 0xc4cbd2d9,
    0xe0e7eef5, 0xfc030a11, 0x181f262d, 0x343b4249, 0x50575e65, 0x6c737a81, 0x888f969d, 0xa4abb2b9,
    0xc0c7ced5, 0xdce3eaf1, 0xf8ff060d, 0x141b2229, 0x30373e45, 0x4c535a61, 0x686f767d, 0x848b9299,
    0xa0a7aeb5, 0xbcc3cad1, 0xd8dfe6ed, 0xf4fb0209, 0x10171e25, 0x2c333a41, 0x484f565d, 0x646b7279 };
unsigned int RK[32];

unsigned int rotate_left(unsigned int num, unsigned int bits) {
    return (num << bits) | (num >> (32 - bits));
}

unsigned int L(unsigned int x)
{
    return x ^ rotate_left(x,2) ^ rotate_left(x, 10) ^ rotate_left(x, 18) ^ rotate_left(x, 24);
}

unsigned int L_1(unsigned int x)
{
    return x ^ rotate_left(x, 13) ^ rotate_left(x, 23);
}

unsigned int tao(unsigned int x)
{
    return Sbox[x & 0xFF] | (Sbox[(x >> 8) & 0xFF] << 8) | (Sbox[(x >> 16) & 0xFF] << 16) | (Sbox[(x >> 24) & 0xFF] << 24);
}

unsigned int T(unsigned int x)
{
    return L(tao(x));
}

unsigned int T_p(unsigned int x)
{
    return L_1(tao(x));
}



void Key_Extension()
{
    unsigned int K[36];
    int i = 0;
    for (i = 0; i < 4; i++)
        K[i] = MK[i] ^ FK[i];
    for (i = 0; i < 32; i++)
    {
        K[i + 4] = K[i] ^ (T_p(K[i + 1] ^ K[i + 2] ^ K[i + 3] ^ CK[i]));
        RK[i] = K[i + 4];
    }
}

void setKey(unsigned char* key)
{
    for (int j = 0; j < 4; j++)
        MK[j] = key[j * 4] << 24 | key[j * 4 + 1] << 16 | key[j * 4 + 2] << 8 | key[j * 4 + 3];
    Key_Extension();
}

void encrypt(unsigned char plain[16], unsigned char cipher[16])
{
    unsigned int X[4];
    int j = 0;
    unsigned int temp_x;

    X[0] = plain[0] << 24 | plain[1] << 16 | plain[2] << 8 | plain[3];
    X[1] = plain[4] << 24 | plain[5] << 16 | plain[6] << 8 | plain[7];
    X[2] = plain[8] << 24 | plain[9] << 16 | plain[10] << 8 | plain[11];
    X[3] = plain[12] << 24 | plain[13] << 16 | plain[14] << 8 | plain[15];

    for (j = 0; j < 32; j++) {
        temp_x = X[0] ^ T(X[1] ^ X[2] ^ X[3] ^ RK[j]);
        X[0] = X[1];
        X[1] = X[2];
        X[2] = X[3];
        X[3] = temp_x;
    }
    for (int i = 0; i < 4; i++) {
        cipher[4 * i] = (X[3 - i] >> 24) & 0xff;
        cipher[4 * i + 1] = (X[3 - i] >> 16) & 0xff;
        cipher[4 * i + 2] = (X[3 - i] >> 8) & 0xff;
        cipher[4 * i + 3] = (X[3 - i]) & 0xff;
    }
}



void encrypt(unsigned int plain[4], unsigned int cipher[4])
{
    unsigned int X[4];
    int j = 0;
    unsigned int temp_x;

    for (j = 0; j < 4; j++) {
        X[j] = plain[j];
    }

    for (j = 0; j < 32; j++) {
        temp_x = X[0] ^ T(X[1] ^ X[2] ^ X[3] ^ RK[j]);
        X[0] = X[1];
        X[1] = X[2];
        X[2] = X[3];
        X[3] = temp_x;
    }
    cipher[0] = X[3];
    cipher[1] = X[2];
    cipher[2] = X[1];
    cipher[3] = X[0];

}

void encfile(unsigned int* data_in, unsigned int* data_out)
{
    int i = 0;
    for (i = 0; i < 175812; i += 4) {
        encrypt(data_in + i, data_out + i);
    }
}

void decrypt(unsigned char cipher[16], unsigned char plain[16])
{
    unsigned int X[4];
    int j = 0;
    unsigned int temp_x;

    X[0] = cipher[0] << 24 | cipher[1] << 16 | cipher[2] << 8 | cipher[3];
    X[1] = cipher[4] << 24 | cipher[5] << 16 | cipher[6] << 8 | cipher[7];
    X[2] = cipher[8] << 24 | cipher[9] << 16 | cipher[10] << 8 | cipher[11];
    X[3] = cipher[12] << 24 | cipher[13] << 16 | cipher[14] << 8 | cipher[15];

    for (j = 0; j < 32; j++) {
        temp_x = X[0] ^ T(X[1] ^ X[2] ^ X[3] ^ RK[(31 - j)]);
        X[0] = X[1];
        X[1] = X[2];
        X[2] = X[3];
        X[3] = temp_x;
    }
    for (int i = 0; i < 4; i++) {
        plain[4 * i] = (X[3 - i] >> 24) & 0xff;
        plain[4 * i + 1] = (X[3 - i] >> 16) & 0xff;
        plain[4 * i + 2] = (X[3 - i] >> 8) & 0xff;
        plain[4 * i + 3] = (X[3 - i]) & 0xff;
    }
}


void decrypt(unsigned int cipher[4], unsigned int plain[4])
{
    unsigned int X[4];
    int j = 0;
    unsigned int temp_x;

    for (j = 0; j < 4; j++) {
        X[j] = cipher[j];
    }

    for (j = 0; j < 32; j++) {
        temp_x = X[0] ^ T(X[1] ^ X[2] ^ X[3] ^ RK[(31 - j)]);
        X[0] = X[1];
        X[1] = X[2];
        X[2] = X[3];
        X[3] = temp_x;
    }
    plain[0] = X[3];
    plain[1] = X[2];
    plain[2] = X[1];
    plain[3] = X[0];
}
